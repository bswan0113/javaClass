package note;

public class Note1103 {
/*	변수
 * 	-참조변수 vs 일반변수(정확한 용어 x)
 * 		-일반변수 : 기본 자료형으로 만들어진 변수
 * 		-참조변수 : 기본 자료형이 아닌 것들로 만들어진 것 ex) 배열, 객체(ex)String) 등등...
 * 		
 * 		-매개변수 : 메소드를 실행하기 위해 필요한 정보를 전달하는 변수
 * 			-인자 : 메소드를 실행하기 위해 실제로 전달되어야 하는 값
 * 		-지역변수 : 메소드 안에서 선언되고, 그 안에서 사용되는 변수
 * 		-멤버변수(필드) : 클래스 안에 선언하는 변수
 * 			-인스턴스 필드
 * 			-클래스 필드
 * 
 * 	메소드
 * 	 -특정 기능을 할 수 있도록 모아놓은 코드
 * 	 -하나의 메소드가 하나의 기능을 할 수 있는게 좋음
 * 	 
 * 	메소드 사용의 이점
 * 	 -재사용을 통해 코드의 길이를 줄일 수 있음(재사용이 용이해야 좋은 코드)
 * 	 -기능의 유지보수가 쉬워짐
 * 	 -기능의 구조 파악이 원활해짐 
 * 
 * 	메소드오버로딩 : 동일한 메소드가 여러개 존재하는것.
 * 	 -매개변수가 다른 경우에 사용가능 => 종류or개수가 다른 경우
 * 	 -같은 이름으로 같은 기능을 실행하는 매개변수의 종류를 늘릴 수 있음 ex)System.out.print
 * 	 -가변인자(매개변수의 개수가 한정되지 않는 경우)
 * 		=> 자료형 ... 배열명
 * 		=> 매개변수의 가장 마지막에 위치
 * 		
 * 	클래스 
 *	 -필드 : 정보
 *	 -메소드 : 기능
 *	 -생성자 : 필드를 초기화
 *
 *	클래스를 사용하는 이유
 *	 -클래스를 통해 필드를 편리하게 관리하고, 필요한 기능을 구현하여 사용할 수 있음
 * */

	/* 클래스에 생성자를 추가하지 않으면 기본 생성자가 자동으로 추가가 됨
 * 클래스에 생성자가 하나라도 있으면 기본 생성자가 자동으로 추가되지 않음
 * */
	
	/* this : 객체 본인을 나타내는 참조 변수
	 *	- 주로 매개변수의 이름과 멤버변수의 이름이 같은데, 메소드안에서 함께 사용이 될 때
	 *	=>메소드에서 매개변수(필드)의 이름과 멤버변수의 이름이 같으면 변수를 호출했을 때 매개변수가 불려짐
	 *	- 메소드명이 길때 자동완성을 위해서 사용하기도함
	 *	this() : 해당 클래스의 생성자를 호출할때 사용,
	 *			 생성자에서 첫번째 줄에 추가
	 * */
	
	/*	필드 초기화 순서
	 * 	1. 필드 기본값으로 초기화
	 * 	2. 명시적 초기화(필드 선언 후 =를 통해 하는 초기화)
	 * 	3. 초기화 블록 : {}
	 * 	4. 생성자
	 * 
	 * */
	
	/*	static
	 * 	-같은 클래스로 만들어진 모든 객체들이 공유하는 필드/메소드에 붙이는 예약어/키워드
	 * 	-클래스명으로 호출
	 * 	-클래스가 메모리에 로딩이 되면 필드와 메소드가 생성
	 * 
	 * 	static이 안붙은 필드/메소드
	 * 	-각 개체마다 필드/메소드를 지님
	 * 	-객체명으로 호출
	 *  -생성 시점이 객체를 생성하는 시점에 필드와 메소드가 생성
	 *  
	 *  static 필드/메소드 => static메소드/객체메소드에서 사용가능
	 *  
	 *  객체 필드/메소드 => 객체 메소드에서 사용가능
	 * */
}
